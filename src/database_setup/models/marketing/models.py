from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Text, Float, Enum
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB
from models.base import Base
import datetime


class SEOTargeting(Base):
    __tablename__ = 'seo_targeting'
    __table_args__ = {'schema': 'marketing'}

    seo_id = Column(Integer, primary_key=True)
    keyword = Column(String, nullable=False)  # Target keyword
    search_volume = Column(Integer, nullable=False)  # Monthly search volume for the keyword
    competition_level = Column(String, nullable=True)  # e.g., High, Medium, Low
    target_url = Column(String, nullable=False)  # URL being optimized
    ranking_position = Column(Integer, nullable=True)  # Current ranking of the target URL
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    # You can later add a relationship to track which page is optimized for this keyword


class SEOAnalytics(Base):
    __tablename__ = 'seo_analytics'
    __table_args__ = {'schema': 'marketing'}

    analytics_id = Column(Integer, primary_key=True)
    seo_id = Column(Integer, ForeignKey('marketing.seo_targeting.seo_id'))
    visits = Column(Integer, default=0)  # Number of visits generated by SEO
    bounce_rate = Column(Float, default=0)  # Bounce rate from organic traffic
    conversions = Column(Integer, default=0)  # Number of conversions (e.g., sign-ups, purchases)
    ranking_position = Column(Integer, nullable=True)  # Updated ranking position
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)

    seo_targeting = relationship("SEOTargeting", backref="seo_analytics")


class SocialMediaCampaign(Base):
    __tablename__ = 'social_media_campaigns'
    __table_args__ = {'schema': 'marketing'}

    sm_campaign_id = Column(Integer, primary_key=True)
    platform = Column(String, nullable=False)  # e.g., Facebook, Instagram, Twitter, LinkedIn
    campaign_name = Column(String, nullable=False)
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    budget = Column(Float, nullable=True)
    target_audience = Column(JSONB, nullable=True)  # Audience targeting criteria (age, gender, interests, etc.)
    status = Column(String, default="active", nullable=False)  # e.g., active, completed, paused


class SocialMediaAd(Base):
    __tablename__ = 'social_media_ads'
    __table_args__ = {'schema': 'marketing'}

    sm_ad_id = Column(Integer, primary_key=True)
    sm_campaign_id = Column(Integer, ForeignKey('marketing.social_media_campaigns.sm_campaign_id'))
    ad_name = Column(String, nullable=False)
    ad_type = Column(String, nullable=False)  # e.g., image, video, carousel
    ad_content = Column(Text, nullable=True)  # URL or creative text
    clicks = Column(Integer, default=0)  # Number of clicks
    impressions = Column(Integer, default=0)  # Number of impressions
    ctr = Column(Float, default=0)  # Click-through rate
    cost_per_click = Column(Float, default=0)  # Cost per click for this ad
    status = Column(String, default="active", nullable=False)  # e.g., active, paused, completed

    social_media_campaign = relationship("SocialMediaCampaign", backref="social_media_ads")


class SocialMediaEngagement(Base):
    __tablename__ = 'social_media_engagement'
    __table_args__ = {'schema': 'marketing'}

    engagement_id = Column(Integer, primary_key=True)
    sm_ad_id = Column(Integer, ForeignKey('marketing.social_media_ads.sm_ad_id'))
    likes = Column(Integer, default=0)  # Number of likes
    comments = Column(Integer, default=0)  # Number of comments
    shares = Column(Integer, default=0)  # Number of shares
    click_through = Column(Integer, default=0)  # Number of click-throughs
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)

    social_media_ad = relationship("SocialMediaAd", backref="social_media_engagement")


